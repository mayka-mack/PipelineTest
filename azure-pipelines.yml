# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Get true branch name -- cannot use Build.SourceBranchName due to / in the branch name
name: $[ variables['branchName'] ]
variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]

trigger:
  branches:
    include:
    - 'release/*'

pool:
  vmImage: ubuntu-latest

steps:
# - task: DeleteFiles@1
#   displayName: 'Clean workspace'
#   inputs:
#     SourceFolder: '$(Pipeline.Workspace)'
#     Contents: '*/**'
#     RemoveDotFiles: true
#   condition: always()

- checkout: self
  fetchDepth: 0
  fetchTags: true
  persistCredentials: true

- script: |
    versionNumber="$(git show -s --format=%s)"

    echo "##[section]Setting Git username and email for pipeline"
    git config --local user.email pipeline@pipeline.com
    git config --local user.name "Pipeline"
    ##[command]git status

    echo "##[section]Updating production branch"
    git checkout production
    git merge --squash "origin/$BRANCHNAME"

    CONFLICTS=$(git ls-files -u | wc -l)
    if [ "$CONFLICTS" -gt 0 ] ; then
      echo "There is a merge conflict. Aborting"
      exit 1
    fi

    echo "##[section]Committing changes"
    git commit -m "v$versionNumber"

    echo "##[section]Tagging commit"
    git tag "v$versionNumber"

    echo "##[section]Updating development branch"
    git checkout development
    git merge --squash "origin/$BRANCHNAME"

    CONFLICTS=$(git ls-files -u | wc -l)
    if [ "$CONFLICTS" -gt 0 ] ; then
      echo "There is a merge conflict. Aborting"
      exit 1
    fi

    echo "##[section]Committing changes"
    git commit -m "v$versionNumber"

    echo "##[section]Pushing changes to origin"
    git push --set-upstream origin development
    if [ $? -ne 0 ]; then
      echo "Push to development failed. Aborting"
      exit 1
    fi
    gi checkout production
    git push --set-upstream origin production --tags
    git push origin --tags

    echo "##[section]Deleting branch $BRANCHNAME"
    git push -d origin "$BRANCHNAME"
  displayName: Bump version
  workingDirectory: $(System.DefaultWorkingDirectory)
