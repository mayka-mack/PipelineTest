# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  gitPipelineUser: 'Azure Pipelines'
  gitPipelineEmail: 'pipelines@azure.com'
  gitFormatCommitMessage: 'Format solution'
  # Get true branch name -- cannot use Build.SourceBranchName due to / in the branch name
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]

trigger:
  branches:
    include:
    - 'release/*'

pr:
  branches:
    include:
    - development
    - production
    - '*/Testing'

pool:
  vmImage: ubuntu-latest

jobs:
- job: PullRequest
  displayName: 'Run PR Checks'
  # Only run PR checks if merging into development branch
  condition: >
    and(
        eq(variables['System.PullRequest.targetBranchName'], 'development'),
        eq(variables['Build.Reason'], 'PullRequest'))
  steps:
  - checkout: self
    fetchDepth: 0
    fetchTags: true
    persistCredentials: true

  # Must set Git username and password to commit any changes later
  - script: |
      echo "##[section]Setting Git username and email for pipeline"
      echo "##[command]git config --local user.email \"$GITPIPELINEEMAIL\""
      git config --local user.email "$GITPIPELINEEMAIL"
      echo "##[command]git config --local user.name \"$GITPIPELINEUSER\""
      git config --local user.name "$GITPIPELINEUSER"
    displayName: Set Git username/email for pipeline
    workingDirectory: $(System.DefaultWorkingDirectory)

  # Must restore formatting tools
  - task: DotNetCoreCLI@2
    displayName: Restore dotnet tools
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'restore'

  # With pull request triggers, there will be an additional commit for a merge;
  # we can discard this commit so it will not appear in the history if we make changes
  # Note: to be double sure the last commit is not a true commit, also validate
  # the commit message via Regex and checkout the specific hash instead of HEAD^
  - script: |
      lastCommitMessage="$(git show -s --format=%s)"
      regex="Merge ([a-f0-9]{40}) into [a-f0-9]{40}"

      if [[ $lastCommitMessage =~ $regex ]]; then
          lastCommitHash="${BASH_REMATCH[1]}"
          echo "Last commit hash is $lastCommitHash"
          echo "##[command]git checkout \"$lastCommitHash\""
          git checkout "$lastCommitHash"

          if [ $? -ne 0 ]; then
              echo "##[error]Checkout failed; aborting."
              exit 1
          fi
      else
          echo "Last commit is a true commit"
      fi
    displayName: Checkout last true commit
    workingDirectory: $(System.DefaultWorkingDirectory)

  - script: |
      echo "##[section]Checking last commit"

      echo "##[command]lastCommit=\"\$(git show -s --format='%ae - %s')\""
      lastCommit="$(git show -s --format='%ae - %s')"

      echo "##[section]Setting \"wasFormatted\" pipeline variable"

      if [ "$lastCommit" == "$GITPIPELINEEMAIL - $GITFORMATCOMMITMESSAGE" ]; then
          echo "##[command]# #vso[task.setvariable variable=wasFormatted;]true"
          echo "##vso[task.setvariable variable=wasFormatted;]true"
      else
          echo "##[command]# #vso[task.setvariable variable=wasFormatted;]false"
          echo "##vso[task.setvariable variable=wasFormatted;]false"
      fi
    displayName: Check if last commit came from formatter
    workingDirectory: $(System.DefaultWorkingDirectory)

  # Running the formatters will happen *only* if the "wasFormatted" variable got set to false
  # in the previous step, meaning the last commit was *not* made by the pipeline for submitting
  # formatting updates; should things go awry, this should hopefully prevent recursive commits
  - script: |
      echo "##[section]Running formatting"

      # Storing results of CSharpier formatting to an errors variable with a log level of Warning
      # should only populate the variable if there are issues, which will give the ability to check
      # if anything failed with a warning and abort the formatter

      echo "##[command]errors=\"\$(dotnet csharpier . --write-stdout --loglevel Warning 2>&1)\""
      errors="$(dotnet csharpier . --write-stdout --loglevel Warning 2>&1)""

      if [ $? -ne 0 ] || [ -n "$errors" ]; then
          echo "##[command]echo \"$errors\""
          echo "$errors"
          echo "##[error]CSharpier formatting failed; aborting."
          exit 1
      fi

      echo "##[command]dotnet xstyler --recursive --directory . --config ./Settings.XamlStyler"
      dotnet xstyler --recursive --directory . --config ./Settings.XamlStyler

      if [ $? -ne 0 ]; then
          echo "##[error]Xaml Styler formatting failed; aborting."
          exit 1
      fi

      if [ -n "$(git status --porcelain)" ]; then
          echo "Committing formatting changes."

          echo "##[command]git add -A"
          git add -A

          echo "##[command]git commit -m \"$GITFORMATCOMMITMESSAGE\""
          git commit -m "$GITFORMATCOMMITMESSAGE"

          echo "##[command]git push origin HEAD:\"$BRANCHNAME\""
          git push origin HEAD:"$BRANCHNAME"

          if [ $? -ne 0 ]; then
              echo "##[error]Pushing formatting changes to remote failed; aborting."
              exit 1
          fi
      fi
    displayName: Run formatting
    condition: and(succeeded(), eq(variables.wasFormatted, false))
    workingDirectory: $(System.DefaultWorkingDirectory)

# - script: |
#     versionNumber="$(git show -s --format=%s)"

#     echo "##[section]Setting Git username and email for pipeline"

#     echo "##[command]git config --local user.email pipeline@pipeline.com"
#     git config --local user.email pipeline@pipeline.com

#     echo "##[command]git config --local user.name \"Pipeline\""
#     git config --local user.name "Pipeline"

#     echo "##[section]Updating production branch"

#     echo "##[command]git checkout production"
#     git checkout production

#     echo "##[command]git merge --squash \"origin/$BRANCHNAME\""
#     git merge --squash "origin/$BRANCHNAME"

#     CONFLICTS=$(git ls-files -u | wc -l)
#     if [ "$CONFLICTS" -gt 0 ] ; then
#       echo "There is a merge conflict. Aborting"
#       exit 1
#     fi

#     echo "##[section]Committing changes"
#     echo "##[command]git commit -m \"v$versionNumber\""
#     git commit -m "v$versionNumber"

#     echo "##[section]Tagging commit"
#     echo "##[command]git tag \"v$versionNumber\""
#     git tag "v$versionNumber"

#     echo "##[section]Updating development branch"

#     echo "##[command]git checkout development"
#     git checkout development

#     echo "##[command]git merge --squash \"origin/$BRANCHNAME\""
#     git merge --squash "origin/$BRANCHNAME"

#     CONFLICTS=$(git ls-files -u | wc -l)
#     if [ "$CONFLICTS" -gt 0 ] ; then
#       echo "There is a merge conflict. Aborting"
#       exit 1
#     fi

#     echo "##[section]Committing changes"
#     echo "##[command]git commit -m \"v$versionNumber\""
#     git commit -m "v$versionNumber"

#     echo "##[section]Pushing changes to origin"

#     echo "##[command]git push --set-upstream origin development"
#     git push --set-upstream origin development

#     if [ $? -ne 0 ]; then
#       echo "Push to development failed. Aborting"
#       exit 1
#     fi

#     echo "##[command]git checkout production"
#     git checkout production

#     echo "##[command]push --set-upstream origin production"
#     git push --set-upstream origin production

#     echo "##[command]push origin --tags"
#     git push origin --tags

#     echo "##[section]Deleting branch origin/$BRANCHNAME"
#     echo "##[command]git push -d origin \"$BRANCHNAME\""
#     git push -d origin "$BRANCHNAME"
#   displayName: Bump version
#   workingDirectory: $(System.DefaultWorkingDirectory)
