# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  gitPipelineUser: 'Pipeline'
  gitPipelineEmail: 'pipeline@pipeline.com'
  gitFormatCommitMessage: 'Format files'
  # Get true branch name -- cannot use Build.SourceBranchName due to / in the branch name
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]

trigger:
  branches:
    include:
    - 'release/*'

pr:
  branches:
    include:
    - development
    - production
    - '*/Testing'

pool:
  vmImage: ubuntu-latest

jobs:
- job: Setup
  displayName: 'Initial Setup'
  steps:
  - checkout: self
    fetchDepth: 0
    fetchTags: true
    persistCredentials: true

  - script: |
      echo "##[section]Setting Git username and email for pipeline"
      echo "##[command]git config --local user.email \"$GITPIPELINEEMAIL\""
      git config --local user.email "$GITPIPELINEEMAIL"
      echo "##[command]git config --local user.name \"$GITPIPELINEUSER\""
      git config --local user.name "$GITPIPELINEUSER"
    displayName: Set Git username/email for pipeline
    workingDirectory: $(System.DefaultWorkingDirectory)

- job: PullRequest
  displayName: 'Run PR Checks'
  dependsOn: Setup
  condition: eq(variables['Build.Reason'], 'PullRequest')

  steps:
  - task: DotNetCoreCLI@2
    displayName: Restore dotnet tools
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'restore'
  
  - script: |
      echo "##[section]Running formatting"
      echo "##[command]dotnet csharpier ."
      dotnet csharpier .

      if [ $? -ne 0 ]; then
        echo "CSharpier formatting failed; aborting."
        exit 1
      fi

      echo "##[command]dotnet xstyler --recursive --directory . --config ./Settings.XamlStyler"
      dotnet xstyler --recursive --directory . --config ./Settings.XamlStyler

      if [ $? -ne 0 ]; then
        echo "Xaml Styler formatting failed; aborting."
        exit 1
      fi

      if [ -n "$(git status --porcelain)" ]; then
        lastCommit="$(git show -s --format='%ae - %s')"

        if [ lastCommit -eq "$GITPIPELINEEMAIL - $GITFORMATCOMMITMESSAGE" ]; then
          echo "Formatter stuck in loop; aborting."
          exit 1
        fi

        echo "Committing formatting changes."

        echo "##[command]git commit -m \"$GITFORMATCOMMITMESSAGE\""
        git commit -m "$GITFORMATCOMMITMESSAGE"

        echo "##[command]git push -set-upstream origin \"$BRANCHNAME\""
        git push -set-upstream origin "$BRANCHNAME"

        if [ $? -ne 0 ]; then
          echo "Pushing formatting changes to remote failed; aborting."
          exit 1
        fi
      fi
    displayName: Run formatting
    workingDirectory: $(System.DefaultWorkingDirectory)

# - script: |
#     versionNumber="$(git show -s --format=%s)"

#     echo "##[section]Setting Git username and email for pipeline"

#     echo "##[command]git config --local user.email pipeline@pipeline.com"
#     git config --local user.email pipeline@pipeline.com

#     echo "##[command]git config --local user.name \"Pipeline\""
#     git config --local user.name "Pipeline"

#     echo "##[section]Updating production branch"

#     echo "##[command]git checkout production"
#     git checkout production

#     echo "##[command]git merge --squash \"origin/$BRANCHNAME\""
#     git merge --squash "origin/$BRANCHNAME"

#     CONFLICTS=$(git ls-files -u | wc -l)
#     if [ "$CONFLICTS" -gt 0 ] ; then
#       echo "There is a merge conflict. Aborting"
#       exit 1
#     fi

#     echo "##[section]Committing changes"
#     echo "##[command]git commit -m \"v$versionNumber\""
#     git commit -m "v$versionNumber"

#     echo "##[section]Tagging commit"
#     echo "##[command]git tag \"v$versionNumber\""
#     git tag "v$versionNumber"

#     echo "##[section]Updating development branch"

#     echo "##[command]git checkout development"
#     git checkout development

#     echo "##[command]git merge --squash \"origin/$BRANCHNAME\""
#     git merge --squash "origin/$BRANCHNAME"

#     CONFLICTS=$(git ls-files -u | wc -l)
#     if [ "$CONFLICTS" -gt 0 ] ; then
#       echo "There is a merge conflict. Aborting"
#       exit 1
#     fi

#     echo "##[section]Committing changes"
#     echo "##[command]git commit -m \"v$versionNumber\""
#     git commit -m "v$versionNumber"

#     echo "##[section]Pushing changes to origin"

#     echo "##[command]git push --set-upstream origin development"
#     git push --set-upstream origin development

#     if [ $? -ne 0 ]; then
#       echo "Push to development failed. Aborting"
#       exit 1
#     fi

#     echo "##[command]git checkout production"
#     git checkout production

#     echo "##[command]push --set-upstream origin production"
#     git push --set-upstream origin production

#     echo "##[command]push origin --tags"
#     git push origin --tags

#     echo "##[section]Deleting branch origin/$BRANCHNAME"
#     echo "##[command]git push -d origin \"$BRANCHNAME\""
#     git push -d origin "$BRANCHNAME"
#   displayName: Bump version
#   workingDirectory: $(System.DefaultWorkingDirectory)
